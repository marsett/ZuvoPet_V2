@model List<Notificacion>
@{
    ViewData["Title"] = "Mis Notificaciones";
    @Html.AntiForgeryToken()
}

<div class="container-fluid px-4 py-5 notifications-container">
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h1 class="notification-page-title mb-0">
                <span class="title-highlight">Mis</span>
                <span class="title-highlight">Notificaciones</span>
                <span class="title-emoji">🔔</span>
            </h1>
            <div class="notification-stats">
                <span class="badge rounded-pill bg-primary px-3 py-2">
                    <i class="fas fa-bell me-1"></i> Total: @ViewBag.TotalNotificaciones
                </span>
                @if (ViewBag.NoLeidas > 0)
                {
                    <span class="badge rounded-pill bg-danger px-3 py-2 ms-2">
                        <i class="fas fa-envelope me-1"></i> No leídas: @ViewBag.NoLeidas
                    </span>
                    <button id="marcarTodas" class="btn btn-outline-primary mark-all-btn ms-3">
                        <i class="fas fa-check-double me-2"></i>Marcar todas como leídas
                    </button>
                }
            </div>
        </div>
    </div>

    @if (Model.Count == 0)
    {
        <div class="text-center mt-5 empty-notifications">
            <h3 class="text-muted">No tienes notificaciones en este momento 📭</h3>
            <p class="lead">Te avisaremos cuando haya novedades importantes</p>
        </div>
    }
    else
    {
        <div class="row g-4" id="notificationsGallery">
            @foreach (var notificacion in Model)
            {
                <div class="col-12 col-lg-6" id="notificacion-@notificacion.Id">
                    <div class="card notification-card h-100 border-0 shadow-lg overflow-hidden @(notificacion.Leido ? "notification-read" : "")">
                        <div class="card-body p-0">
                            <div class="notification-card-content p-4">
                                <div class="d-flex w-100 justify-content-between align-items-center mb-3">
                                    <div class="notification-badges">
                                        @if (!notificacion.Leido)
                                        {
                                            <span class="badge rounded-pill bg-primary me-2">
                                                <i class="fas fa-star me-1"></i>Nueva
                                            </span>
                                        }
                                        <span class="badge rounded-pill @GetTipoBadge(notificacion.Tipo)">
                                            <i class="@GetTipoIcono(notificacion.Tipo) me-1"></i>@notificacion.Tipo
                                        </span>
                                    </div>
                                    <div class="notification-date">
                                        <span class="badge bg-light text-dark rounded-pill">
                                            <i class="fas fa-calendar-alt me-1"></i>@notificacion.Fecha.ToString("dd/MM/yyyy HH:mm")
                                        </span>
                                    </div>
                                </div>

                                <div class="notification-message p-3 mb-3">
                                    <p class="mb-0">@notificacion.Mensaje</p>
                                </div>

                                <div class="notification-actions d-flex justify-content-between align-items-center">
                                    <div>
                                        @if (!string.IsNullOrEmpty(notificacion.Url))
                                        {
                                            <a href="@notificacion.Url" class="btn btn-primary action-btn">
                                                <i class="fas fa-info-circle me-2"></i>Ver detalle
                                            </a>
                                        }
                                    </div>
                                    <div class="d-flex gap-2">
                                        @if (!notificacion.Leido)
                                        {
                                            <button class="btn btn-outline-primary action-btn marcar-leida" data-id="@notificacion.Id">
                                                <i class="fas fa-check me-2"></i>Marcar como leída
                                            </button>
                                        }
                                        <button class="btn btn-outline-danger action-btn eliminar-notificacion" data-id="@notificacion.Id">
                                            <i class="fas fa-trash-alt me-2"></i>Eliminar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Paginación -->
        @if (ViewBag.TotalPaginas > 1)
        {
            <div class="row">
                <div class="col-12">
                    <div class="pagination-controls d-flex justify-content-center mt-5 mb-3">
                        <a class="btn btn-outline-primary me-2 @(ViewBag.PaginaActual <= 1 ? "disabled" : "")"
                           href="@Url.Action("Notificaciones", new { pagina = 1 })">
                            <i class="fas fa-angle-double-left"></i>
                        </a>
                        <a class="btn btn-outline-primary me-2 @(ViewBag.PaginaActual <= 1 ? "disabled" : "")"
                           href="@Url.Action("Notificaciones", new { pagina = ViewBag.PaginaActual - 1 })">
                            <i class="fas fa-angle-left"></i>
                        </a>
                        <span class="badge bg-primary rounded-pill px-3 py-2 d-flex align-items-center mx-2">
                            <i class="fas fa-bell me-1"></i>
                            <span id="paginaInfo">@ViewBag.PaginaActual de @ViewBag.TotalPaginas</span>
                        </span>
                        <a class="btn btn-outline-primary ms-2 @(ViewBag.PaginaActual >= ViewBag.TotalPaginas ? "disabled" : "")"
                           href="@Url.Action("Notificaciones", new { pagina = ViewBag.PaginaActual + 1 })">
                            <i class="fas fa-angle-right"></i>
                        </a>
                        <a class="btn btn-outline-primary ms-2 @(ViewBag.PaginaActual >= ViewBag.TotalPaginas ? "disabled" : "")"
                           href="@Url.Action("Notificaciones", new { pagina = ViewBag.TotalPaginas })">
                            <i class="fas fa-angle-double-right"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    /* Page Title Styling */
    .notification-page-title {
        font-family: 'Arial', sans-serif;
        font-size: 2.5rem;
        font-weight: 800;
        color: #333;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .title-highlight {
        position: relative;
        display: inline-block;
    }

        .title-highlight::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(to right, #007bff, #00c6ff);
            transform: scaleX(0);
            transform-origin: right;
            transition: transform 0.3s ease;
        }

    .notification-page-title:hover .title-highlight::after {
        transform: scaleX(1);
        transform-origin: left;
    }

    .title-emoji {
        display: inline-block;
        transform: translateY(-3px);
        margin-left: 10px;
    }

    /* Notification Card Styling */
    .notification-card {
        perspective: 1000px;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border-radius: 15px;
    }

        .notification-card:hover {
            transform: translateY(-5px) rotateX(2deg);
            box-shadow: 0 15px 30px rgba(0,0,0,0.1);
        }

    .notification-read {
        background-color: #f8f9fa;
        opacity: 0.85;
    }

    .notification-message {
        background-color: #f8f9fa;
        border-radius: 10px;
        border-left: 4px solid #007bff;
    }

    .notification-read .notification-message {
        border-left-color: #6c757d;
    }

    /* Button Styling */
    .mark-all-btn {
        padding: 0.5rem 1rem;
        border-radius: 30px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .mark-all-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,123,255,0.2);
        }

    .action-btn {
        display: flex;
        align-items: center;
        border-radius: 30px;
        padding: 0.5rem 1.2rem;
        transition: all 0.3s ease;
    }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

    /* Badges Styling */
    .badge {
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .notification-date .badge {
        font-size: 0.85rem;
    }

    /* Empty Notifications */
    .empty-notifications {
        padding: 4rem 2rem;
        background-color: #f8f9fa;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }

    /* Pagination controls styling */
    .pagination-controls .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        padding: 0;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

        .pagination-controls .btn:hover:not(.disabled) {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .pagination-controls .badge {
        height: 40px;
    }

    .pagination-controls .btn.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>

<script>
    $(document).ready(function() {
        // Marcar notificación como leída
        $('.marcar-leida').click(function() {
            const id = $(this).data('id');
            const notificacionElement = $(`#notificacion-${id}`);

            Swal.fire({
                title: '¿Marcar como leída?',
                text: '¿Deseas marcar esta notificación como leída?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, marcar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("MarcarComoLeida")',
                        type: 'POST',
                        data: { idNotificacion: id },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                notificacionElement.find('.card').addClass('notification-read');
                                notificacionElement.find('.badge.bg-primary').fadeOut();
                                notificacionElement.find('.marcar-leida').fadeOut();

                                Swal.fire({
                                    title: '¡Marcada como leída!',
                                    text: 'La notificación ha sido marcada como leída',
                                    icon: 'success',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error("Error:", error);
                            Swal.fire({
                                title: 'Error',
                                text: 'Ocurrió un error al marcar la notificación como leída',
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        });

        // Marcar todas como leídas
        $('#marcarTodas').click(function() {
            Swal.fire({
                title: '¿Marcar todas como leídas?',
                text: '¿Deseas marcar todas las notificaciones como leídas?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, marcar todas',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("MarcarTodasComoLeidas")',
                        type: 'POST',
                        data: {},
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    title: '¡Notificaciones actualizadas!',
                                    text: 'Todas las notificaciones han sido marcadas como leídas',
                                    icon: 'success',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error("Error:", error);
                            Swal.fire({
                                title: 'Error',
                                text: 'Ocurrió un error al marcar todas las notificaciones como leídas',
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        });

        // Eliminar notificación
        $('.eliminar-notificacion').click(function() {
            const id = $(this).data('id');
            const notificacionElement = $(`#notificacion-${id}`);

            Swal.fire({
                title: '¿Eliminar notificación?',
                text: '¿Estás seguro de que deseas eliminar esta notificación? Esta acción no se puede deshacer.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("EliminarNotificacion")',
                        type: 'POST',
                        data: { idNotificacion: id },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                notificacionElement.fadeOut('slow', function() {
                                    $(this).remove();
                                    if ($('.notification-card').length === 0) {
                                        location.reload();
                                    }
                                });

                                Swal.fire({
                                    title: '¡Eliminada!',
                                    text: 'La notificación ha sido eliminada correctamente',
                                    icon: 'success',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error("Error:", error);
                            Swal.fire({
                                title: 'Error',
                                text: 'Ocurrió un error al eliminar la notificación',
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        });
            function verificarNuevasNotificaciones() {
        $.ajax({
            url: '/Adoptante/VerificarNuevasNotificaciones', // Deberás crear este endpoint
            type: 'GET',
            success: function(response) {
                if (response.hayNuevas) {
                    // Si hay nuevas notificaciones, recargar la página o actualizar la UI
                    location.reload();
                    // O actualizar solo los elementos necesarios sin recargar
                }
            },
            complete: function() {
                // Programar la próxima verificación
                setTimeout(verificarNuevasNotificaciones, 5000); 
            }
        });
    }
        setTimeout(verificarNuevasNotificaciones, 5000);
    });
</script>

@functions {
    string GetTipoBadge(string tipo)
    {
        return tipo switch
        {
            "Solicitud" => "bg-info",
            "Aprobación" => "bg-success",
            "Mensaje" => "bg-warning",
            "Sistema" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    string GetTipoIcono(string tipo)
    {
        return tipo switch
        {
            "Solicitud" => "fas fa-clipboard-list",
            "Aprobación" => "fas fa-check-circle",
            "Mensaje" => "fas fa-envelope",
            "Sistema" => "fas fa-cogs",
            _ => "fas fa-bell"
        };
    }
}